let g:c_std_libs = [
\   "assert.h",
\   "complex.h",
\   "ctype.h",
\   "errno.h",
\   "fenv.h",
\   "float.h",
\   "inttypes.h",
\   "iso646.h",
\   "limits.h",
\   "locale.h",
\   "math.h",
\   "setjmp.h",
\   "signal.h",
\   "stdalign.h",
\   "stdarg.h",
\   "stdatomic.h",
\   "stdbool.h",
\   "stddef.h",
\   "stdint.h",
\   "stdio.h",
\   "stdlib.h",
\   "stdnoreturn.h",
\   "string.h",
\   "tgmath.h",
\   "threads.h",
\   "time.h",
\   "uchar.h",
\   "wchar.h",
\   "wctype.h",
\   "concepts",
\   "coroutine",
\   "cstdlib",
\   "csignal",
\   "csetjmp",
\   "cstdarg",
\   "typeinfo",
\   "typeindex",
\   "type_traits",
\   "bitset",
\   "functional",
\   "utility",
\   "ctime",
\   "chrono",
\   "cstddef",
\   "initializer_list",
\   "tuple",
\   "any",
\   "optional",
\   "variant",
\   "compare",
\   "version",
\   "new",
\   "memory",
\   "scoped_allocator",
\   "memory_resource",
\   "climits",
\   "cfloat",
\   "cstdint",
\   "cinttypes",
\   "limits",
\   "exception",
\   "stdexcept",
\   "cassert",
\   "system_error",
\   "cerrno",
\   "contract",
\   "cctype",
\   "cwctype",
\   "cstring",
\   "cwchar",
\   "cuchar",
\   "string",
\   "string_view",
\   "charconv",
\   "array",
\   "vector",
\   "deque",
\   "list",
\   "forward_list",
\   "set",
\   "map",
\   "unordered_set",
\   "unordered_map",
\   "stack",
\   "queue",
\   "span",
\   "iterator",
\   "ranges",
\   "algorithm",
\   "cmath",
\   "complex",
\   "valarray",
\   "random",
\   "numeric",
\   "ratio",
\   "cfenv",
\   "bit",
\   "iosfwd",
\   "ios",
\   "istream",
\   "ostream",
\   "iostream",
\   "fstream",
\   "sstream",
\   "syncstream",
\   "strstream",
\   "iomanip",
\   "streambuf",
\   "cstdio",
\   "locale",
\   "clocale",
\   "codecvt",
\   "regex",
\   "atomic",
\   "thread",
\   "mutex",
\   "shared_mutex",
\   "future",
\   "condition_variable",
\   "filesystem",
\   "experimental/filesystem",
\   "experimental/algorithm",
\   "experimental/execution_policy",
\   "experimental/exception_list",
\   "experimental/numeric",
\   "experimental/algorithm",
\   "experimental/any",
\   "experimental/chrono",
\   "experimental/deque",
\   "experimental/forward_list",
\   "experimental/future",
\   "experimental/list",
\   "experimental/functional",
\   "experimental/map",
\   "experimental/memory",
\   "experimental/memory_resource",
\   "experimental/optional",
\   "experimental/ratio",
\   "experimental/regex",
\   "experimental/set",
\   "experimental/string",
\   "experimental/string_view",
\   "experimental/system_error",
\   "experimental/tuple",
\   "experimental/type_traits",
\   "experimental/unordered_map",
\   "experimental/unordered_set",
\   "experimental/utility",
\   "experimental/vector",
\   "experimental/atomic",
\   "experimental/barrier",
\   "experimental/future",
\   "experimental/latch",
\   "experimental/algorithm",
\   "experimental/array",
\   "experimental/deque",
\   "experimental/forward_list",
\   "experimental/functional",
\   "experimental/iterator",
\   "experimental/list",
\   "experimental/map",
\   "experimental/memory",
\   "experimental/numeric",
\   "experimental/propagate_const",
\   "experimental/random",
\   "experimental/set",
\   "experimental/source_location",
\   "experimental/string",
\   "experimental/type_traits",
\   "experimental/unordered_map",
\   "experimental/unordered_set",
\   "experimental/vector",
\   "experimental/ranges/algorithm",
\   "experimental/ranges/concepts",
\   "experimental/ranges/functional",
\   "experimental/ranges/iterator",
\   "experimental/ranges/random",
\   "experimental/ranges/range",
\   "experimental/ranges/tuple",
\   "experimental/ranges/type_traits",
\   "experimental/ranges/utility",
\   "assert.h",
\   "ctype.h",
\   "errno.h",
\   "fenv.h",
\   "float.h",
\   "inttypes.h",
\   "limits.h",
\   "locale.h",
\   "math.h",
\   "setjmp.h",
\   "signal.h",
\   "stdarg.h",
\   "stddef.h",
\   "stdint.h",
\   "stdio.h",
\   "stdlib.h",
\   "string.h",
\   "time.h",
\   "uchar.h",
\   "wchar.h",
\   "wctype.h",
\   ]

function! Include()

    let exe_str = 'normal! '

    call inputsave()
    let prompt = 'Enter include: '
    let headers = []
    let header = input(prompt, '', 'file')
    while header != ''
        call add(headers, header)
        let header = input(prompt, '', 'file')
    endwhile
    echo 'Input ' . len(headers) . ' headers/includes.'
    call inputrestore()

    for h in headers
        if &filetype ==# 'python'
            let pre = 'import '
            let post = ''
        elseif &filetype ==# 'c' || &filetype ==# 'cpp'
            if (index(g:c_std_libs, h) >= 0)
                let pre = '#include <'
                let post = '>'
            else
                let pre = '#include "'
                let post = '"'
            endif
        endif
        let exe_str .= 'i'. pre . h . post . ''
    endfor

    exe exe_str
endfunction

nnoremap <c-i> :call Include()
